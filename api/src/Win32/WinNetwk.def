<* +M2EXTENSIONS  *>
<* ALIGNMENT="8" *>
<* ENUMSIZE="4" *>
<* SETSIZE="4" *>

DEFINITION MODULE ["StdCall"] WinNetwk;

(* WinNetwk.def

    Standard WINNET Import File for WIN32
*)

FROM WinDef IMPORT BOOL, PVOID, WORD, DWORD, UINT,
                   WCHAR, PSTR, PWSTR, PCSTR, PCWSTR, STRING, WSTRING,
                   HWND, HANDLE;

FROM WinError IMPORT NO_ERROR, ERROR_NOT_SUPPORTED, ERROR_CANCELLED, ERROR_RETRY,
                     ERROR_UNEXP_NET_ERR, ERROR_MORE_DATA, ERROR_INVALID_ADDRESS, ERROR_INVALID_PARAMETER,
                     ERROR_BAD_USERNAME, ERROR_INVALID_PASSWORD, ERROR_ACCESS_DENIED, ERROR_BUSY,
                     ERROR_NOT_ENOUGH_MEMORY, ERROR_NO_NETWORK, ERROR_EXTENDED_ERROR,
                     ERROR_INVALID_LEVEL, ERROR_INVALID_HANDLE, ERROR_ALREADY_INITIALIZED, ERROR_NO_MORE_DEVICES,
                     ERROR_NOT_CONNECTED, ERROR_OPEN_FILES, ERROR_DEVICE_IN_USE, ERROR_BAD_NET_NAME,
                     ERROR_BAD_DEVICE, ERROR_ALREADY_ASSIGNED, ERROR_GEN_FAILURE, ERROR_CONNECTION_UNAVAIL,
                     ERROR_NO_NET_OR_BAD_PATH, ERROR_BAD_PROVIDER, ERROR_CANNOT_OPEN_PROFILE, ERROR_BAD_PROFILE,
                     ERROR_BAD_DEV_TYPE, ERROR_DEVICE_ALREADY_REMEMBERED, ERROR_NO_MORE_ITEMS, ERROR_NOT_CONTAINER,
                     ERROR_NOT_AUTHENTICATED, ERROR_NOT_LOGGED_ON, ERROR_NO_LOGON_SERVERS;

(*
** Network types
*)

CONST WNNC_NET_MSNET      = 00010000h;
      WNNC_NET_LANMAN     = 00020000h;
      WNNC_NET_NETWARE    = 00030000h;
      WNNC_NET_VINES      = 00040000h;
      WNNC_NET_10NET      = 00050000h;
      WNNC_NET_LOCUS      = 00060000h;
      WNNC_NET_SUN_PC_NFS = 00070000h;
      WNNC_NET_LANSTEP    = 00080000h;
      WNNC_NET_9TILES     = 00090000h;
      WNNC_NET_LANTASTIC  = 000A0000h;
      WNNC_NET_AS400      = 000B0000h;
      WNNC_NET_FTP_NFS    = 000C0000h;
      WNNC_NET_PATHWORKS  = 000D0000h;
      WNNC_NET_LIFENET    = 000E0000h;
      WNNC_NET_POWERLAN   = 000F0000h;
      WNNC_NET_BWNFS      = 00100000h;
      WNNC_NET_COGENT     = 00110000h;
      WNNC_NET_FARALLON   = 00120000h;
      WNNC_NET_APPLETALK  = 00130000h;
      WNNC_NET_INTERGRAPH = 00140000h;

(*
**  Network Resources.
*)

TYPE RESOURCESCOPE_TYPE = (RESOURCE_SCOPE_0,
                           RESOURCE_CONNECTED,  (* 00000001h *)
                           RESOURCE_GLOBALNET,  (* 00000002h *)
                           RESOURCE_REMEMBERED, (* 00000003h *)
                           RESOURCE_RECENT,     (* 00000004h *)
                           RESOURCE_CONTEXT);   (* 00000005h *)

TYPE RESOURCETYPE_TYPE = BITSET;

CONST RESOURCETYPE_ANY        = { }; (* 0x00000000 *)
      RESOURCETYPE_DISK       = {0}; (* 0x00000001 *)
      RESOURCETYPE_PRINT      = {1}; (* 0x00000002 *)
      RESOURCETYPE_RESERVED   = {3}; (* 0x00000008 *)
      RESOURCETYPE_UNKNOWN    = {0..31}; (* 0xFFFFFFFF *)


TYPE RESOURCEUSAGE_TYPE = BITSET;

CONST RESOURCEUSAGE_CONNECTABLE   = {0}; (* 00000001h *)
      RESOURCEUSAGE_CONTAINER     = {1}; (* 00000002h *)
      RESOURCEUSAGE_NOLOCALDEVICE = {2}; (* 00000004h *)
      RESOURCEUSAGE_SIBLING       = {3}; (* 00000008h *)

      RESOURCEUSAGE_ALL = RESOURCEUSAGE_CONNECTABLE + RESOURCEUSAGE_CONTAINER;

      RESOURCEUSAGE_RESERVED      = {0}; (* 80000000h *)

TYPE RESOURCEDISPLAYTYPE_TYPE = (RESOURCEDISPLAYTYPE_GENERIC,    (* 0x00000000h *)
                                 RESOURCEDISPLAYTYPE_DOMAIN,     (* 0x00000001h *)
                                 RESOURCEDISPLAYTYPE_SERVER,     (* 0x00000002h *)
                                 RESOURCEDISPLAYTYPE_SHARE,      (* 0x00000003h *)
                                 RESOURCEDISPLAYTYPE_FILE,       (* 0x00000004h *)
                                 RESOURCEDISPLAYTYPE_GROUP,      (* 0x00000005h *)
                                 RESOURCEDISPLAYTYPE_NETWORK,    (* 0x00000006h *)
                                 RESOURCEDISPLAYTYPE_ROOT,       (* 0x00000007h *)
                                 RESOURCEDISPLAYTYPE_SHAREADMIN, (* 0x00000008h *)
                                 RESOURCEDISPLAYTYPE_DIRECTORY,  (* 0x00000009h *)
                                 RESOURCEDISPLAYTYPE_TREE);      (* 0x0000000Ah *)

TYPE NETRESOURCEA = RECORD
                           dwScope       : RESOURCESCOPE_TYPE;
                           dwType        : RESOURCETYPE_TYPE;
                           dwDisplayType : RESOURCEDISPLAYTYPE_TYPE;
                           dwUsage       : RESOURCEUSAGE_TYPE;
                           lpLocalName   : PSTR;
                           lpRemoteName  : PSTR;
                           lpComment     : PSTR;
                           lpProvider    : PSTR;
                    END;
    PNETRESOURCEA = POINTER TO NETRESOURCEA;

TYPE NETRESOURCEW = RECORD
                           dwScope       : RESOURCESCOPE_TYPE;
                           dwType        : RESOURCETYPE_TYPE;
                           dwDisplayType : RESOURCEDISPLAYTYPE_TYPE;
                           dwUsage       : RESOURCEUSAGE_TYPE;
                           lpLocalName   : PWSTR;
                           lpRemoteName  : PWSTR;
                           lpComment     : PWSTR;
                           lpProvider    : PWSTR;
                    END;
    PNETRESOURCEW = POINTER TO NETRESOURCEW;

<* IF DEFINED (UNICODE) THEN *>
      TYPE  NETRESOURCE =  NETRESOURCEW;
      TYPE PNETRESOURCE = PNETRESOURCEW;
<* ELSE *>
      TYPE  NETRESOURCE =  NETRESOURCEA;
      TYPE PNETRESOURCE = PNETRESOURCEA;
<* END *>

(*
**  Network Connections.
*)

CONST NETPROPERTY_PERSISTENT = 1;

TYPE CONNECT_ENUM = (CONNECT__UPDATE_PROFILE, (* 0 *)
                     CONNECT__UPDATE_RECENT,  (* 1 *)
                     CONNECT__TEMPORARY,      (* 2 *)
                     CONNECT__INTERACTIVE,    (* 3 *)
                     CONNECT__PROMPT,         (* 4 *)
                     CONNECT__NEED_DRIVE,     (* 5 *)
                     CONNECT__REFCOUNT,       (* 6 *)
                     CONNECT__REDIRECT,       (* 7 *)
                     CONNECT__LOCALDRIVE,     (* 8 *)
                     CONNECT__CURRENT_MEDIA); (* 9 *)

     CONNECT_SET = SET OF CONNECT_ENUM;

CONST CONNECT_UPDATE_PROFILE = CONNECT_SET {CONNECT__UPDATE_PROFILE}; (* 0x00000001 *)
      CONNECT_UPDATE_RECENT  = CONNECT_SET {CONNECT__UPDATE_RECENT};  (* 0x00000002 *)
      CONNECT_TEMPORARY      = CONNECT_SET {CONNECT__TEMPORARY};      (* 0x00000004 *)
      CONNECT_INTERACTIVE    = CONNECT_SET {CONNECT__INTERACTIVE};    (* 0x00000008 *)
      CONNECT_PROMPT         = CONNECT_SET {CONNECT__PROMPT};         (* 0x00000010 *)
      CONNECT_NEED_DRIVE     = CONNECT_SET {CONNECT__NEED_DRIVE};     (* 0x00000020 *)
      CONNECT_REFCOUNT       = CONNECT_SET {CONNECT__REFCOUNT};       (* 0x00000040 *)
      CONNECT_REDIRECT       = CONNECT_SET {CONNECT__REDIRECT};       (* 0x00000080 *)
      CONNECT_LOCALDRIVE     = CONNECT_SET {CONNECT__LOCALDRIVE};     (* 0x00000100 *)
      CONNECT_CURRENT_MEDIA  = CONNECT_SET {CONNECT__CURRENT_MEDIA};  (* 0x00000200 *)


PROCEDURE WNetAddConnectionA (RemoteName : ARRAY OF CHAR;
                              Password   : PCSTR;
                              LocalName  : PCSTR) : DWORD;

PROCEDURE WNetAddConnectionW (RemoteName : ARRAY OF WCHAR;
                              Password   : PCWSTR;
                              LocalName  : PCWSTR) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetAddConnection = WNetAddConnectionW;
<* ELSE *>
      CONST WNetAddConnection = WNetAddConnectionA;
<* END *>


PROCEDURE WNetAddConnection2A (VAR NetResource : NETRESOURCEA;
                               Password        : PCSTR;
                               UserName        : PCSTR;
                               dwFlags         : CONNECT_SET) : DWORD;

PROCEDURE WNetAddConnection2W (VAR NetResource : NETRESOURCEW;
                               Password        : PCWSTR;
                               UserName        : PCWSTR;
                               dwFlags         : CONNECT_SET) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetAddConnection2 = WNetAddConnection2W;
<* ELSE *>
      CONST WNetAddConnection2 = WNetAddConnection2A;
<* END *>

<* IF BACKEND # "C" THEN *>
PROCEDURE WNetAddConnection3A (hwndOwner   : HWND;
                               NetResource : NETRESOURCEA;
                               Password    : PCSTR;
                               UserName    : PCSTR;
                               dwFlags     : CONNECT_SET) : DWORD;
<* ELSE *>
PROCEDURE WNetAddConnection3A (hwndOwner   : HWND;
                               NetResource : PNETRESOURCEA;
                               Password    : PCSTR;
                               UserName    : PCSTR;
                               dwFlags     : CONNECT_SET) : DWORD;
<* END *>

<* IF BACKEND # "C" THEN *>
PROCEDURE WNetAddConnection3W (hwndOwner   : HWND;
                               NetResource : NETRESOURCEW;
                               Password    : PCWSTR;
                               UserName    : PCWSTR;
                               dwFlags     : CONNECT_SET) : DWORD;
<* ELSE *>
PROCEDURE WNetAddConnection3W (hwndOwner   : HWND;
                               NetResource : PNETRESOURCEW;
                               Password    : PCWSTR;
                               UserName    : PCWSTR;
                               dwFlags     : CONNECT_SET) : DWORD;
<* END *>

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetAddConnection3 = WNetAddConnection3W;
<* ELSE *>
      CONST WNetAddConnection3 = WNetAddConnection3A;
<* END *>

PROCEDURE WNetCancelConnectionA (lpName :  ARRAY OF CHAR; fForce : BOOL) : DWORD;
PROCEDURE WNetCancelConnectionW (lpName : ARRAY OF WCHAR; fForce : BOOL) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetCancelConnection = WNetCancelConnectionW;
<* ELSE *>
      CONST WNetCancelConnection = WNetCancelConnectionA;
<* END *>

PROCEDURE WNetCancelConnection2A (lpName  : ARRAY OF CHAR;
                                  dwFlags : CONNECT_SET;
                                  fForce  : BOOL) : DWORD;

PROCEDURE WNetCancelConnection2W (lpName  : ARRAY OF WCHAR;
                                  dwFlags : CONNECT_SET;
                                  fForce  : BOOL) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetCancelConnection2 = WNetCancelConnection2W;
<* ELSE *>
      CONST WNetCancelConnection2 = WNetCancelConnection2A;
<* END *>

PROCEDURE WNetGetConnectionA (LocalName  : ARRAY OF CHAR;
                              RemoteName : STRING;
                              VAR Length : DWORD) : DWORD;

PROCEDURE WNetGetConnectionW (LocalName  : ARRAY OF WCHAR;
                              RemoteName : WSTRING;
                              VAR Length : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetConnection = WNetGetConnectionW;
<* ELSE *>
      CONST WNetGetConnection = WNetGetConnectionA;
<* END *>

<* IF BACKEND # "C" THEN *>
PROCEDURE WNetUseConnectionA (hwndOwner           : HWND;
                             NetResource          : NETRESOURCEA;
                             Password             : PCSTR;
                             UserID               : PCSTR;
                             dwFlags              : CONNECT_SET;
                             VAR [NIL] AccessName : ARRAY OF CHAR;
                             VAR BufferSize       : DWORD;
                             VAR Result           : DWORD) : DWORD;
<* ELSE *>
PROCEDURE WNetUseConnectionA (hwndOwner           : HWND;
                             NetResource          : PNETRESOURCEA;
                             Password             : PCSTR;
                             UserID               : PCSTR;
                             dwFlags              : CONNECT_SET;
                             AccessName           : PSTR;
                             VAR BufferSize       : DWORD;
                             VAR Result           : DWORD) : DWORD;
<* END *>

<* IF BACKEND # "C" THEN *>
PROCEDURE WNetUseConnectionW (hwndOwner           : HWND;
                             NetResource          : NETRESOURCEW;
                             Password             : PCWSTR;
                             UserID               : PCWSTR;
                             dwFlags              : CONNECT_SET;
                             VAR [NIL] AccessName : ARRAY OF WCHAR;
                             VAR BufferSize       : DWORD;
                             VAR Result           : DWORD) : DWORD;
<* ELSE *>
PROCEDURE WNetUseConnectionW (hwndOwner           : HWND;
                             NetResource          : PNETRESOURCEW;
                             Password             : PCWSTR;
                             UserID               : PCWSTR;
                             dwFlags              : CONNECT_SET;
                             AccessName           : PWSTR;
                             VAR BufferSize       : DWORD;
                             VAR Result           : DWORD) : DWORD;
<* END *>

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetUseConnection = WNetUseConnectionW;
<* ELSE *>
      CONST WNetUseConnection = WNetUseConnectionA;
<* END *>

PROCEDURE WNetSetConnectionA (Name       : ARRAY OF CHAR;
                              Properties : DWORD;
                              pvValues   : PVOID) : DWORD;

PROCEDURE WNetSetConnectionW (Name       : ARRAY OF WCHAR;
                              Properties : DWORD;
                              pvValues   : PVOID) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetSetConnection = WNetSetConnectionW;
<* ELSE *>
      CONST WNetSetConnection = WNetSetConnectionA;
<* END *>

(*
**  Network Connection Dialogs.
*)

PROCEDURE WNetConnectionDialog (hwnd   : HWND;
                                dwType : RESOURCETYPE_TYPE) : DWORD;

PROCEDURE WNetDisconnectDialog (hwnd   : HWND;
                                dwType : RESOURCETYPE_TYPE) : DWORD;



TYPE CONNDLG_ENUM = (CONNDLG__RO_PATH,      (* 0 - Resource path should be read-only    *)
                     CONNDLG__CONN_POINT,   (* 1 - Netware -style movable connection point enabled *)
                     CONNDLG__USE_MRU,      (* 2 - Use MRU combobox  *)
                     CONNDLG__HIDE_BOX,     (* 3 - Hide persistent connect checkbox  *)
                     CONNDLG__PERSIST,      (* 4 - Force persistent connection *)
                     CONNDLG__NOT_PERSIST); (* 5 - Force connection NOT persistent *)

     CONNDLG_SET = SET OF CONNDLG_ENUM;


CONST CONNDLG_RO_PATH     = CONNDLG_SET {CONNDLG__RO_PATH   }; (* 0x00000001 *)
      CONNDLG_CONN_POINT  = CONNDLG_SET {CONNDLG__CONN_POINT}; (* 0x00000002 *)
      CONNDLG_USE_MRU     = CONNDLG_SET {CONNDLG__USE_MRU   }; (* 0x00000004 *)
      CONNDLG_HIDE_BOX    = CONNDLG_SET {CONNDLG__HIDE_BOX  }; (* 0x00000008 *)

(*
 * NOTE:  Set at most ONE of the below flags.  If neither flag is set,
 *        then the persistence is set to whatever the user chose during
 *        a previous connection
 *)

      CONNDLG_PERSIST     = CONNDLG_SET {CONNDLG__PERSIST    }; (* 0x00000010 *)
      CONNDLG_NOT_PERSIST = CONNDLG_SET {CONNDLG__NOT_PERSIST}; (* 0x00000020 *)

TYPE CONNECTDLGSTRUCTA  =
     RECORD
          cbStructure : DWORD;         (* size of this structure in bytes *)
          hwndOwner   : HWND;          (* owner window for the dialog *)
          lpConnRes   : PNETRESOURCEA; (* Requested Resource info    *)
          dwFlags     : CONNDLG_SET;   (* flags (see below) *)
          dwDevNum    : DWORD;         (* number of devices connected to *)
     END;
    PCONNECTDLGSTRUCTA = POINTER TO CONNECTDLGSTRUCTA;

TYPE CONNECTDLGSTRUCTW  =
     RECORD
          cbStructure : DWORD;         (* size of this structure in bytes *)
          hwndOwner   : HWND;          (* owner window for the dialog *)
          lpConnRes   : PNETRESOURCEW; (* Requested Resource info    *)
          dwFlags     : CONNDLG_SET;   (* flags (see below) *)
          dwDevNum    : DWORD;         (* number of devices connected to *)
     END;
    PCONNECTDLGSTRUCTW = POINTER TO CONNECTDLGSTRUCTW;

<* IF DEFINED (UNICODE) THEN *>
      TYPE CONNECTDLGSTRUCT  =  CONNECTDLGSTRUCTW;
      TYPE PCONNECTDLGSTRUCT = PCONNECTDLGSTRUCTW;
<* ELSE *>
      TYPE CONNECTDLGSTRUCT  =  CONNECTDLGSTRUCTA;
      TYPE PCONNECTDLGSTRUCT = PCONNECTDLGSTRUCTA;
<* END *>

PROCEDURE WNetConnectionDialog1A (VAR ConnDlgStruct : CONNECTDLGSTRUCTA) : DWORD;
PROCEDURE WNetConnectionDialog1W (VAR ConnDlgStruct : CONNECTDLGSTRUCTW) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetConnectionDialog1 = WNetConnectionDialog1W;
<* ELSE *>
      CONST WNetConnectionDialog1 = WNetConnectionDialog1A;
<* END *>


TYPE DISC_ENUM = (DISC__UPDATE_PROFILE, (* 0 *)
                  DISC__1, DISC__2,
                  DISC__3, DISC__4,
                  DISC__5,
                  DISC__NO_FORCE);      (* 6 *)

     DISC_SET = SET OF DISC_ENUM;

CONST DISC_UPDATE_PROFILE = DISC_SET {DISC__UPDATE_PROFILE}; (* 0x00000001 *)
      DISC_NO_FORCE       = DISC_SET {DISC__NO_FORCE};       (* 0x00000040 *)

TYPE DISCDLGSTRUCTA =
     RECORD
          cbStructure  : DWORD;     (* size of this structure in bytes *)
          hwndOwner    : HWND;      (* owner window for the dialog *)
          lpLocalName  : PSTR;      (* local device name *)
          lpRemoteName : PSTR;      (* network resource name *)
          dwFlags      : DISC_SET;  (* flags *)
     END;
    PDISCDLGSTRUCTA = POINTER TO DISCDLGSTRUCTA;

TYPE DISCDLGSTRUCTW =
     RECORD
          cbStructure  : DWORD;     (* size of this structure in bytes *)
          hwndOwner    : HWND;      (* owner window for the dialog *)
          lpLocalName  : PWSTR;     (* local device name *)
          lpRemoteName : PWSTR;     (* network resource name *)
          dwFlags      : DISC_SET;  (* flags *)
     END;
    PDISCDLGSTRUCTW = POINTER TO DISCDLGSTRUCTW;

<* IF DEFINED (UNICODE) THEN *>
      TYPE  DISCDLGSTRUCT =  DISCDLGSTRUCTW;
      TYPE PDISCDLGSTRUCT = PDISCDLGSTRUCTW;
<* ELSE *>
      TYPE  DISCDLGSTRUCT =  DISCDLGSTRUCTA;
      TYPE PDISCDLGSTRUCT = PDISCDLGSTRUCTA;
<* END *>

PROCEDURE WNetDisconnectDialog1A (VAR ConnDlgStruct : DISCDLGSTRUCTA) : DWORD;
PROCEDURE WNetDisconnectDialog1W (VAR ConnDlgStruct : DISCDLGSTRUCTW) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetDisconnectDialog1 = WNetDisconnectDialog1W;
<* ELSE *>
      CONST WNetDisconnectDialog1 = WNetDisconnectDialog1A;
<* END *>

(*
**  Network Browsing.
*)

PROCEDURE WNetOpenEnumA (dwScope : RESOURCESCOPE_TYPE;
                         dwType  : RESOURCETYPE_TYPE;
                         dwUsage : RESOURCEUSAGE_TYPE;
                         VAR [NIL] NetResource : NETRESOURCEA;
                         VAR hEnum : HANDLE) : DWORD;

PROCEDURE WNetOpenEnumW (dwScope : RESOURCESCOPE_TYPE;
                         dwType  : RESOURCETYPE_TYPE;
                         dwUsage : RESOURCEUSAGE_TYPE;
                         VAR [NIL] NetResource : NETRESOURCEW;
                         VAR hEnum : HANDLE) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetOpenEnum = WNetOpenEnumW;
<* ELSE *>
      CONST WNetOpenEnum = WNetOpenEnumA;
<* END *>

PROCEDURE WNetEnumResourceA (hEnum          : HANDLE;
                             VAR Count      : DWORD;
                             Buffer         : PVOID;
                             VAR BufferSize : DWORD) : DWORD;

PROCEDURE WNetEnumResourceW (hEnum          : HANDLE;
                             VAR Count      : DWORD;
                             Buffer         : PVOID;
                             VAR BufferSize : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetEnumResource = WNetEnumResourceW;
<* ELSE *>
      CONST WNetEnumResource = WNetEnumResourceA;
<* END *>

PROCEDURE WNetCloseEnum (hEnum : HANDLE) : DWORD;


(*
**  Universal Naming.
*)

TYPE NAME_INFO_ENUM = (NAME_INFO_0,
                       UNIVERSAL_NAME_INFO_LEVEL, (* 0x00000001 *)
                       REMOTE_NAME_INFO_LEVEL);   (* 0x00000002 *)

TYPE UNIVERSAL_NAME_INFOA = RECORD
                                   UniversalName : PSTR;
                            END;
    PUNIVERSAL_NAME_INFOA = POINTER TO UNIVERSAL_NAME_INFOA;

TYPE UNIVERSAL_NAME_INFOW = RECORD
                                   UniversalName : PWSTR;
                            END;
    PUNIVERSAL_NAME_INFOW = POINTER TO UNIVERSAL_NAME_INFOW;

<* IF DEFINED (UNICODE) THEN *>
      TYPE UNIVERSAL_NAME_INFO  =  UNIVERSAL_NAME_INFOW;
      TYPE PUNIVERSAL_NAME_INFO = PUNIVERSAL_NAME_INFOW;
<* ELSE *>
      TYPE UNIVERSAL_NAME_INFO  =  UNIVERSAL_NAME_INFOA;
      TYPE PUNIVERSAL_NAME_INFO = PUNIVERSAL_NAME_INFOA;
<* END *>

TYPE REMOTE_NAME_INFOA = RECORD
                                lpUniversalName  : PSTR;
                                lpConnectionName : PSTR;
                                lpRemainingPath  : PSTR;
                         END;
    PREMOTE_NAME_INFOA = POINTER TO REMOTE_NAME_INFOA;

TYPE REMOTE_NAME_INFOW = RECORD
                                lpUniversalName  : PWSTR;
                                lpConnectionName : PWSTR;
                                lpRemainingPath  : PWSTR;
                         END;
    PREMOTE_NAME_INFOW = POINTER TO REMOTE_NAME_INFOW;

<* IF DEFINED (UNICODE) THEN *>
      TYPE  REMOTE_NAME_INFO =  REMOTE_NAME_INFOW;
      TYPE PREMOTE_NAME_INFO = PREMOTE_NAME_INFOW;
<* ELSE *>
      TYPE  REMOTE_NAME_INFO =  REMOTE_NAME_INFOA;
      TYPE PREMOTE_NAME_INFO = PREMOTE_NAME_INFOA;
<* END *>

PROCEDURE WNetGetUniversalNameA (LocalPath      : ARRAY OF CHAR;
                                 dwInfoLevel    : NAME_INFO_ENUM;
                                 Buffer         : PVOID;
                                 VAR BufferSize : DWORD) : DWORD;

PROCEDURE WNetGetUniversalNameW (LocalPath      : ARRAY OF WCHAR;
                                 dwInfoLevel    : NAME_INFO_ENUM;
                                 Buffer         : PVOID;
                                 VAR BufferSize : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetUniversalName = WNetGetUniversalNameW;
<* ELSE *>
      CONST WNetGetUniversalName = WNetGetUniversalNameA;
<* END *>


(*
**  Authentication and Logon/Logoff.
*)

PROCEDURE WNetGetUserA (Name       : PCSTR;
                        UserName   : PSTR;
                        VAR Length : DWORD) : DWORD;

PROCEDURE WNetGetUserW (Name       : PCWSTR;
                        UserName   : PWSTR;
                        VAR Length : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetUser = WNetGetUserW;
<* ELSE *>
      CONST WNetGetUser = WNetGetUserA;
<* END *>


(*
** Other.
*)

CONST WNFMT_MULTILINE         = 01h;
      WNFMT_ABBREVIATED       = 02h;
      WNFMT_INENUM            = 10h;
      WNFMT_CONNECTION        = 20h;

PROCEDURE WNetGetProviderNameA (dwNetType : DWORD;
                                ProviderName : STRING;
                                VAR  lpBufferSize : DWORD) : DWORD;

PROCEDURE WNetGetProviderNameW (dwNetType : DWORD;
                                ProviderName : WSTRING;
                                VAR  lpBufferSize : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetProviderName = WNetGetProviderNameW;
<* ELSE *>
      CONST WNetGetProviderName = WNetGetProviderNameA;
<* END *>

TYPE NETINFOSTRUCT  = RECORD
                             cbStructure       : DWORD;
                             dwProviderVersion : DWORD;
                             dwStatus          : DWORD;
                             dwCharacteristics : DWORD;
                             dwHandle          : DWORD;
                             wNetType          : WORD;
                             dwPrinters        : DWORD;
                             dwDrives          : DWORD;
                      END;
     PNETINFOSTRUCT = POINTER TO NETINFOSTRUCT;

CONST NETINFO_DLL16      = 00000001h;  (* Provider running as 16 bit Winnet Driver *)
      NETINFO_DISKRED    = 00000004h;  (* Provider requires disk redirections to connect *)
      NETINFO_PRINTERRED = 00000008h;  (* Provider requires printer redirections to connect *)


PROCEDURE WNetGetNetworkInformationA (Provider : ARRAY OF CHAR;
                                      VAR lpNetInfoStruct : NETINFOSTRUCT) : DWORD;

PROCEDURE WNetGetNetworkInformationW (Provider : ARRAY OF WCHAR;
                                      VAR lpNetInfoStruct : NETINFOSTRUCT) : DWORD;
<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetNetworkInformation = WNetGetNetworkInformationW;
<* ELSE *>
      CONST WNetGetNetworkInformation = WNetGetNetworkInformationA;
<* END *>

(*
**  User Profiles.
*)

TYPE PFNGETPROFILEPATHA = PROCEDURE ((* pszUsername : *) PCSTR,
                                     (* pszBuffer   : *) PSTR,
                                     (* cbBuffer    : *) UINT) : UINT;

TYPE PFNGETPROFILEPATHW = PROCEDURE ((* pszUsername : *) PCWSTR,
                                     (* pszBuffer   : *) PWSTR,
                                     (* cbBuffer    : *) UINT) : UINT;

<* IF DEFINED (UNICODE) THEN *>
      TYPE PFNGETPROFILEPATH = PFNGETPROFILEPATHW;
<* ELSE *>
      TYPE PFNGETPROFILEPATH = PFNGETPROFILEPATHA;
<* END *>

TYPE PFNRECONCILEPROFILEA = PROCEDURE ((* CentralFile : *) PCSTR,
                                       (* LocalFile :   *) PCSTR,
                                       (* dwFlags :     *) DWORD) : UINT;

TYPE PFNRECONCILEPROFILEW = PROCEDURE ((* CentralFile : *) PCWSTR,
                                       (* LocalFile :   *) PCWSTR,
                                       (* dwFlags :     *) DWORD) : UINT;

<* IF DEFINED (UNICODE) THEN *>
      TYPE PFNRECONCILEPROFILE = PFNRECONCILEPROFILEW;
<* ELSE *>
      TYPE PFNRECONCILEPROFILE = PFNRECONCILEPROFILEA;
<* END *>

CONST RP_LOGON   = 01h;  (* if set, do for logon, else for logoff *)
      RP_INIFILE = 02h;  (* if set, reconcile .INI file, else reg. hive *)

(*
**  Policies.
*)

TYPE PFNPROCESSPOLICIESA = PROCEDURE ( (* hwnd         : *) HWND,
                                       (* Path         : *) PCSTR,
                                       (* Username     : *) PCSTR,
                                       (* ComputerName : *) PCSTR,
                                       (* dwFlags      : *) DWORD) : BOOL;

TYPE PFNPROCESSPOLICIESW = PROCEDURE ( (* hwnd         : *) HWND,
                                       (* Path         : *) PCWSTR,
                                       (* Username     : *) PCWSTR,
                                       (* ComputerName : *) PCWSTR,
                                       (* dwFlags      : *) DWORD) : BOOL;

<* IF DEFINED (UNICODE) THEN *>
      TYPE PFNPROCESSPOLICIES = PFNPROCESSPOLICIESW;
<* ELSE *>
      TYPE PFNPROCESSPOLICIES = PFNPROCESSPOLICIESA;
<* END *>

CONST PP_DISPLAYERRORS = 01h; (* if set, display error messages, else fail silently if error *)

(*
**  Error handling.
*)

PROCEDURE WNetGetLastErrorA (VAR Error     : DWORD;
                             ErrorBuf      : PSTR;
                             nErrorBufSize : DWORD;
                             lpNameBuf     : PSTR;
                             nNameBufSize  : DWORD) : DWORD;

PROCEDURE WNetGetLastErrorW (VAR Error     : DWORD;
                             ErrorBuf      : PWSTR;
                             nErrorBufSize : DWORD;
                             lpNameBuf     : PWSTR;
                             nNameBufSize  : DWORD) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST WNetGetLastError = WNetGetLastErrorW;
<* ELSE *>
      CONST WNetGetLastError = WNetGetLastErrorA;
<* END *>

(*
**  STATUS CODES
*)

(* General *)

CONST WN_SUCCESS                    = NO_ERROR;
      WN_NO_ERROR                   = NO_ERROR;
      WN_NOT_SUPPORTED              = ERROR_NOT_SUPPORTED;
      WN_CANCEL                     = ERROR_CANCELLED;
      WN_RETRY                      = ERROR_RETRY;
      WN_NET_ERROR                  = ERROR_UNEXP_NET_ERR;
      WN_MORE_DATA                  = ERROR_MORE_DATA;
      WN_BAD_POINTER                = ERROR_INVALID_ADDRESS;
      WN_BAD_VALUE                  = ERROR_INVALID_PARAMETER;
      WN_BAD_USER                   = ERROR_BAD_USERNAME;
      WN_BAD_PASSWORD               = ERROR_INVALID_PASSWORD;
      WN_ACCESS_DENIED              = ERROR_ACCESS_DENIED;
      WN_FUNCTION_BUSY              = ERROR_BUSY;
      WN_WINDOWS_ERROR              = ERROR_UNEXP_NET_ERR;
      WN_OUT_OF_MEMORY              = ERROR_NOT_ENOUGH_MEMORY;
      WN_NO_NETWORK                 = ERROR_NO_NETWORK;
      WN_EXTENDED_ERROR             = ERROR_EXTENDED_ERROR;
      WN_BAD_LEVEL                  = ERROR_INVALID_LEVEL;
      WN_BAD_HANDLE                 = ERROR_INVALID_HANDLE;
      WN_NOT_INITIALIZING           = ERROR_ALREADY_INITIALIZED;
      WN_NO_MORE_DEVICES            = ERROR_NO_MORE_DEVICES;

(* Connection *)

      WN_NOT_CONNECTED              = ERROR_NOT_CONNECTED;
      WN_OPEN_FILES                 = ERROR_OPEN_FILES;
      WN_DEVICE_IN_USE              = ERROR_DEVICE_IN_USE;
      WN_BAD_NETNAME                = ERROR_BAD_NET_NAME;
      WN_BAD_LOCALNAME              = ERROR_BAD_DEVICE;
      WN_ALREADY_CONNECTED          = ERROR_ALREADY_ASSIGNED;
      WN_DEVICE_ERROR               = ERROR_GEN_FAILURE;
      WN_CONNECTION_CLOSED          = ERROR_CONNECTION_UNAVAIL;
      WN_NO_NET_OR_BAD_PATH         = ERROR_NO_NET_OR_BAD_PATH;
      WN_BAD_PROVIDER               = ERROR_BAD_PROVIDER;
      WN_CANNOT_OPEN_PROFILE        = ERROR_CANNOT_OPEN_PROFILE;
      WN_BAD_PROFILE                = ERROR_BAD_PROFILE;
      WN_BAD_DEV_TYPE               = ERROR_BAD_DEV_TYPE;
      WN_DEVICE_ALREADY_REMEMBERED  = ERROR_DEVICE_ALREADY_REMEMBERED;

(* Enumeratio *)

      WN_NO_MORE_ENTRIES            = ERROR_NO_MORE_ITEMS;
      WN_NOT_CONTAINER              = ERROR_NOT_CONTAINER;

(* Authentication *)

      WN_NOT_AUTHENTICATED          = ERROR_NOT_AUTHENTICATED;
      WN_NOT_LOGGED_ON              = ERROR_NOT_LOGGED_ON;
      WN_NOT_VALIDATED              = ERROR_NO_LOGON_SERVERS;

(*
**  For Shell
*)

TYPE NETCONNECTINFOSTRUCT  = RECORD
                                    cbStructure   : DWORD;
                                    dwFlags       : DWORD;
                                    dwSpeed       : DWORD;
                                    dwDelay       : DWORD;
                                    dwOptDataSize : DWORD;
                             END;
    PNETCONNECTINFOSTRUCT = POINTER TO NETCONNECTINFOSTRUCT;

TYPE WNCON_ENUM = (WNCON__FORNETCARD, (* 0 *)
                   WNCON__NOTROUTED,  (* 1 *)
                   WNCON__SLOWLINK,   (* 2 *)
                   WNCON__DYNAMIC);   (* 3 *)

     WNCON_SET = SET OF WNCON_ENUM;

CONST WNCON_FORNETCARD = WNCON_SET {WNCON__FORNETCARD}; (* 0x00000001 *)
      WNCON_NOTROUTED  = WNCON_SET {WNCON__NOTROUTED }; (* 0x00000002 *)
      WNCON_SLOWLINK   = WNCON_SET {WNCON__SLOWLINK  }; (* 0x00000004 *)
      WNCON_DYNAMIC    = WNCON_SET {WNCON__DYNAMIC   }; (* 0x00000008 *)

PROCEDURE MultinetGetConnectionPerformanceA (
               VAR NetResource : NETRESOURCEA;
               VAR NetConnectInfoStruct : NETCONNECTINFOSTRUCT) : DWORD;

PROCEDURE MultinetGetConnectionPerformanceW (
               VAR NetResource : NETRESOURCEW;
               VAR NetConnectInfoStruct : NETCONNECTINFOSTRUCT) : DWORD;

<* IF DEFINED (UNICODE) THEN *>
      CONST MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceW;
<* ELSE *>
      CONST MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceA;
<* END *>

END WinNetwk.
